<!doctype html>
<meta charset="utf8">
<link rel="stylesheet" href="./spec.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4/styles/github.min.css">
<script src="./spec.js"></script>
<pre class="metadata">
title: Map.prototype.emplace
stage: 2
contributors: Erica Pramer
</pre>

<emu-intro id="intro">
  <h1>Introduction</h1>
  <p>Given a `key` and a handler object, the `emplace` method will either remap an existing entry, insert a new entry from a mapping function, or both. `emplace` will return
  the updated or inserted value.</p>
</emu-intro>

<emu-clause id="sec-map.prototype.emplace">
  <h1>Map.prototype.emplace ( _key_ [ , _handler_ ] )</h1>
  <p>When the emplace method is called the following steps are taken:</p>
  <emu-alg>
    1. Let _M_ be the *this* value.
    2. Perform ? RequireInternalSlot(_M_, [[MapData]]).
    3. Let _entries_ be the List that is _M_.[[MapData]].
    6. For each Record { [[Key]], [[Value]] } _e_ that is an element of _entries_, in original key insertion order, do
      1. If _e_.[[Key]] is not ~empty~ and SameValueZero(_e_.[[Key]], _key_) is *true*, then
        1. If ? HasProperty(_handler_, *"update"*) is *true*, then
          1. Let _updateFn_ be ? Get(_handler_, *"update"*).
          2. Let _updated_ be ? Call(_updateFn_, _handler_, « _e_.[[Value]], _key_, _M_ »).
          3. Set _e_.[[Value]] to _updated_.
        2. Return _e_.[[Value]].
    7. Let _insertFn_ be ? Get(_handler_, *"insert"*).
    8. Let _inserted_ be ? Call(_insertFn_, _handler_, « _key_, _M_ »).
    1. Set _e_.[[Value]] to _inserted_.
    10. Return _e_.[[Value]].
  </emu-alg>
</emu-clause>

<emu-clause id="sec-weakmap.prototype.emplace">
  <h1>WeakMap.prototype.emplace ( _key_ [ , _handler_ ] )</h1>
  <p>When the emplace method is called the following steps are taken:</p>
  <emu-alg>
    1. Let _M_ be the *this* value.
    2. Perform ? RequireInternalSlot(_M_, [[WeakMapData]]).
    3. Let _entries_ be the List that is _M_.[[WeakMapData]].
    6. For each Record { [[Key]], [[Value]] } _e_ that is an element of _entries_, in original key insertion order, do
      1. If _e_.[[Key]] is not ~empty~ and SameValue(_e_.[[Key]], _key_) is *true*, then
        1. If ? HasProperty(_handler_, *"update"*) is *true*, then
          1. Let _updateFn_ be ? Get(_handler_, *"update"*).
          2. Let _updated_ be ? Call(_updateFn_, _handler_, « _e_.[[Value]], _key_, _M_ »).
          3. Set _e_.[[Value]] to _updated_.
        2. Return _e_.[[Value]].
    7. Let _insertFn_ be ? Get(_handler_, *"insert"*).
    8. Let _inserted_ be ? Call(_insertFn_, _handler_, « _key_, _M_ »).
    1. Set _e_.[[Value]] to _inserted_.
    10. Return _e_.[[Value]].
  </emu-alg>
</emu-clause>
